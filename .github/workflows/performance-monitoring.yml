name: Performance Monitoring

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  lighthouse_audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build web app
      run: npx expo export --platform web --clear
    
    - name: Serve app
      run: |
        npx serve web-build -l 19006 &
        sleep 10
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun --config=./config/ci/lighthouse.config.js
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-reports-${{ github.run_number }}
        path: .lighthouseci/
        retention-days: 30

  bundle_analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and analyze bundle
      run: |
        npx expo export --platform web --clear
        
        # Install bundle analyzer
        npm install -g webpack-bundle-analyzer
        
        # Analyze bundle
        npx webpack-bundle-analyzer web-build/static/js/*.js --mode static --report bundle-analysis.html --no-open
        
        # Generate bundle stats
        ls -la web-build/static/js/ > bundle-stats.txt
        du -h web-build/static/js/*.js >> bundle-stats.txt
    
    - name: Bundle size check
      run: |
        # Check if main bundle is under 1MB
        main_bundle_size=$(find web-build/static/js/ -name "*.js" | xargs du -c | tail -1 | cut -f1)
        echo "Main bundle size: ${main_bundle_size}KB"
        
        if [ $main_bundle_size -gt 1024 ]; then
          echo "‚ùå Bundle size exceeds 1MB threshold"
          exit 1
        else
          echo "‚úÖ Bundle size is within limits"
        fi
    
    - name: Comment bundle size on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const bundleStats = fs.readFileSync('bundle-stats.txt', 'utf8');
            
            const comment = `## üì¶ Bundle Analysis Report
            
            ### Bundle Size
            \`\`\`
            ${bundleStats}
            \`\`\`
            
            ### Analysis
            - üìä [Detailed Bundle Analysis](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - ‚ö° Performance impact assessment completed
            
            ---
            *Generated by Performance Monitoring Pipeline*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create bundle analysis comment:', error.message);
          }
    
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.run_number }}
        path: |
          bundle-analysis.html
          bundle-stats.txt
        retention-days: 30

  dependency_audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        npm audit --audit-level moderate --json > npm-audit.json || true
        npm audit --audit-level moderate > npm-audit.txt || true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --json > snyk-audit.json || true
        command: test
    
    - name: Analyze audit results
      run: |
        echo "Analyzing security audit results..."
        
        # Check npm audit results
        if [ -f npm-audit.json ]; then
          high_vulns=$(jq '.metadata.vulnerabilities.high' npm-audit.json)
          critical_vulns=$(jq '.metadata.vulnerabilities.critical' npm-audit.json)
          
          echo "High vulnerabilities: $high_vulns"
          echo "Critical vulnerabilities: $critical_vulns"
          
          if [ "$critical_vulns" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found!"
            exit 1
          elif [ "$high_vulns" -gt 5 ]; then
            echo "‚ö†Ô∏è Too many high-severity vulnerabilities"
            exit 1
          fi
        fi
    
    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ github.run_number }}
        path: |
          npm-audit.json
          npm-audit.txt
          snyk-audit.json
        retention-days: 30

  performance_regression_test:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build current version
      run: |
        npx expo export --platform web --clear
        mv web-build current-build
    
    - name: Checkout previous version
      run: |
        git checkout HEAD~1
        npm ci
        npx expo export --platform web --clear
        mv web-build previous-build
        git checkout -
    
    - name: Compare build sizes
      run: |
        current_size=$(du -s current-build | cut -f1)
        previous_size=$(du -s previous-build | cut -f1)
        
        echo "Current build size: ${current_size}KB"
        echo "Previous build size: ${previous_size}KB"
        
        size_diff=$((current_size - previous_size))
        percentage_change=$((size_diff * 100 / previous_size))
        
        echo "Size difference: ${size_diff}KB (${percentage_change}%)"
        
        if [ $percentage_change -gt 10 ]; then
          echo "‚ö†Ô∏è Significant size increase detected: ${percentage_change}%"
          # Don't fail the build, just warn
        elif [ $percentage_change -lt -10 ]; then
          echo "‚úÖ Significant size reduction: ${percentage_change}%"
        else
          echo "‚úÖ Size change within acceptable range: ${percentage_change}%"
        fi
    
    - name: Performance regression summary
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Performance regression test completed');
          // Add logic to post performance changes to GitHub or monitoring systems